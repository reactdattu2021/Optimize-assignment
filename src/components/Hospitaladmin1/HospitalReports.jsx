// src/components/HospitalAdmin/HospitalReports.js
import React from 'react';

const HospitalReports = ({ hospitalId, hospitals, doctors, departments, appointments }) => {
    const hospital = hospitals.find(h => h.id === hospitalId);
    if (!hospital) {
        return <p>Hospital not found.</p>;
    }

    const hospitalAppointments = appointments.filter(apt => apt.hospitalId === hospitalId && apt.status === 'booked');
    const totalConsultations = hospitalAppointments.length;
    let totalHospitalRevenue = 0;
    const revenuePerDoctor = {}; // { docId: totalEarnedFromHospital }
    const revenuePerDepartment = {}; // { deptName: totalEarned }

    hospitalAppointments.forEach(apt => {
        const fee = apt.consultationFee;
        const hospitalShare = fee * 0.40; // 40% to hospital
        totalHospitalRevenue += hospitalShare;

        // Revenue per Doctor
        if (!revenuePerDoctor[apt.doctorId]) {
            revenuePerDoctor[apt.doctorId] = 0;
        }
        revenuePerDoctor[apt.doctorId] += hospitalShare;

        // Revenue per Department (based on doctor's specialization linked to the hospital's department)
        const associatedDoctor = doctors.find(d => d.id === apt.doctorId);
        if (associatedDoctor) {
            const doctorHospitalAssoc = associatedDoctor.hospitals.find(h => h.hospitalId === hospitalId);
            if (doctorHospitalAssoc && doctorHospitalAssoc.specializations) {
                doctorHospitalAssoc.specializations.forEach(spec => {
                    // Assuming department names match specialization names for simplicity
                    const matchingDepartment = departments.find(d => d.hospitalId === hospitalId && d.name.toLowerCase() === spec.toLowerCase());
                    if (matchingDepartment) {
                        if (!revenuePerDepartment[matchingDepartment.name]) {
                            revenuePerDepartment[matchingDepartment.name] = 0;
                        }
                        revenuePerDepartment[matchingDepartment.name] += hospitalShare;
                    }
                });
            }
        }
    });

    return (
        <div className="report-container">
            <h3>Report for {hospital.name}</h3>
            <p><strong>Total Consultations Booked:</strong> {totalConsultations}</p>
            <p><strong>Total Revenue for Hospital:</strong> ${totalHospitalRevenue.toFixed(2)}</p>

            <h4>Revenue per Doctor:</h4>
            {Object.keys(revenuePerDoctor).length === 0 ? (
                <p>No revenue generated by doctors in this hospital yet.</p>
            ) : (
                <ul>
                    {Object.keys(revenuePerDoctor).map(docId => {
                        const doc = doctors.find(d => d.id === docId);
                        return (
                            doc && <li key={docId}>{doc.name}: ${revenuePerDoctor[docId].toFixed(2)}</li>
                        );
                    })}
                </ul>
            )}

            <h4>Revenue per Department:</h4>
            {Object.keys(revenuePerDepartment).length === 0 ? (
                <p>No revenue generated for departments in this hospital yet.</p>
            ) : (
                <ul>
                    {Object.keys(revenuePerDepartment).map(deptName => (
                        <li key={deptName}>{deptName}: ${revenuePerDepartment[deptName].toFixed(2)}</li>
                    ))}
                </ul>
            )}
        </div>
    );
};

export default HospitalReports;